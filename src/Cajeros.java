
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import static java.lang.Integer.parseInt;
import java.lang.reflect.Array;
import java.util.Calendar;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kristophone
 */
public class Cajeros extends JFrame {

    /**
     * Creates new form Cajeros
     */
    public Cajeros() {
        initComponents();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCajeros = new javax.swing.JTextField();
        jTextFieldClientes = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMain = new javax.swing.JTable();
        jLabelErrorOnHours = new javax.swing.JLabel();
        jButtonGenerate = new javax.swing.JButton();
        jLabelErrorCajeros = new javax.swing.JLabel();
        jLabelErrorClientes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel2.setText("Cajeros:");

        jLabel3.setText("Clientes:");

        jTextFieldCajeros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCajerosKeyTyped(evt);
            }
        });

        jTextFieldClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldClientesKeyTyped(evt);
            }
        });

        jTableMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Tiempo entre llegada",
                "Tiempo de llegada al sistema",
                "Tiempo de atenci√≥n",
                "Tiempo total sistema",
                "Sabe que de sistema",
                "Tiempo oscioso cajero",
                "Tiempo en la fila"
            }
        ));
        jScrollPane1.setViewportView(jTableMain);

        jButtonGenerate.setText("Generate");
        jButtonGenerate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonGenerateMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldCajeros, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelErrorCajeros, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelErrorClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelErrorOnHours, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 255, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel3))
                                    .addComponent(jTextFieldClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(79, 79, 79)
                                .addComponent(jButtonGenerate)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCajeros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonGenerate))))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelErrorOnHours, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(jLabelErrorCajeros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelErrorClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldCajerosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCajerosKeyTyped
        char c = evt.getKeyChar();
         
           if (!(Character.isDigit(c) ||
              (c == KeyEvent.VK_BACK_SPACE) ||
              (c == KeyEvent.VK_DELETE))) {
                
                evt.consume();
               
              }
    }//GEN-LAST:event_jTextFieldCajerosKeyTyped

    private void jTextFieldClientesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldClientesKeyTyped
        char c = evt.getKeyChar();
           if (!(Character.isDigit(c) ||
              (c == KeyEvent.VK_BACK_SPACE) ||
              (c == KeyEvent.VK_DELETE))) {
               
                evt.consume();
               
                
              }
    }//GEN-LAST:event_jTextFieldClientesKeyTyped

    private void jButtonGenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonGenerateMouseClicked
        try {
//            String valueStart = jComboBoxHourStart.getSelectedItem().toString();
           
            Boolean ban = false;
            
            if(jTextFieldCajeros.getText().equals("")){
                jLabelErrorCajeros.setText("Llene este campo");
                ban = true;
            }else{
                if(parseInt(jTextFieldCajeros.getText()) > 0){
                   jLabelErrorCajeros.setText("");

                }else{
                   jLabelErrorCajeros.setText("Debe ser mayor a cero");
                   ban = true;
                }
            }
            if(jTextFieldClientes.getText().equals("")){
                jLabelErrorClientes.setText("Llene este campo");
                ban = true;
            }else{
                if(parseInt(jTextFieldClientes.getText()) > 0){
                   jLabelErrorClientes.setText("");

                }else{
                   jLabelErrorClientes.setText("Debe ser mayor a cero");
                   ban = true;
                }
            }
            
            if(!ban){
            
                String cad = "Tiempo entre llegada,Tiempo de llegada al sistema,Tiempo de atenci√≥n,";
        
               // for(int i=1; i<=parseInt(jTextFieldCajeros.getText()); i++){
                    
                   // if (i>1){
                    //    cad += ",";
                  //  }
                    
                    cad += "Llegada al cajero,Salida del cajero";
                    
               // }
                
                cad += ",Tiempo total sistema,Sabe que de sistema,Tiempo oscioso cajero,Tiempo en la fila";
                
                Random rand = new Random();
                Date startTime, attentionTime;
                String [] headers = cad.split(",");
                DateFormat f1 = new SimpleDateFormat("hh:mm a");
                DateFormat f2 = new SimpleDateFormat("mm");
               // startTime = f1.parse(jComboBoxHourStart.getSelectedItem().toString());
               // startTime.setMinutes(1 + rand.nextInt((6 - 1) + 1));
               // String clientArrive = f1.format(startTime);
                attentionTime = f2.parse("00");
                attentionTime.setMinutes(1 + rand.nextInt((10 - 1) + 1));
                Integer attentionTime1 = new Integer(f2.format(attentionTime));
          

                
                Object[][] clients = new Object[parseInt(jTextFieldClientes.getText())][9];
                Object[][] cajeros = new Object[parseInt(jTextFieldCajeros.getText())][2];
                
                Integer e=1;
                Integer temp;
                for(int i=0; parseInt(jTextFieldClientes.getText())>i; i++){
                    if (i == 0){
                        clients[i][0] = 1 + rand.nextInt((6 - 1) + 1);
                        clients[i][1] = clients[i][0];
                        clients[i][2] = 1 + rand.nextInt((10 - 1) + 1);
                        cajeros[0][0] = clients[i][1];
                        temp = parseInt(clients[0][0].toString().split(" ")[0]) + (Integer)clients[i][2];
                        cajeros[0][1] = temp;
                        clients[i][3] = cajeros[0][0].toString()+" --->1";
                        clients[i][4] = cajeros[0][1].toString()+" --->1";
                        clients[i][5] = clients[i][2];
                        clients[i][6] = parseInt(clients[i][4].toString().split(" ")[0]);
                        clients[i][7] = parseInt(clients[i][3].toString().split(" ")[0]);
                        clients[i][8] = 0;
                    }else{
                        clients[i][0] = 1 + rand.nextInt((6 - 1) + 1);
                        clients[i][1] = (Integer)clients[i][0] + (Integer)clients[i-1][1];
                        clients[i][2] = 1 + rand.nextInt((10 - 1) + 1);
                        Integer aux = 0;
                        Integer varTemp = 1;
                        if(e < cajeros.length && cajeros[e][1] == null){
                            cajeros[e][0] = clients[i][1];
                            cajeros[e][1] = (Integer)clients[i][1] + (Integer)clients[i][2];
                            clients[i][7] = (Integer)cajeros[e][0];
                            clients[i][8] = 0;
                            varTemp = e+1;
                            e++;
                        }else{
                            for( Integer x = 1; x < cajeros.length; x++ ){
                                if((Integer)cajeros[x][1] < (Integer)cajeros[x-1][1] ){
                                    varTemp = x+1;
                                    x = cajeros.length;
                                }
                            }
                            aux = (Integer)cajeros[varTemp-1][1];
                            cajeros[varTemp-1][0] = (Integer)clients[i][1];
                            cajeros[varTemp-1][1] = (Integer)cajeros[varTemp-1][0] + (Integer)clients[i][2];
                        }
                        Integer inTemp, outTemp, medTemp;
                            if((Integer)cajeros[varTemp-1][0] >= aux){
                                medTemp = (Integer)cajeros[varTemp-1][0] - aux;
                                inTemp = (Integer)cajeros[varTemp-1][0];
                                outTemp = (Integer)cajeros[varTemp-1][1];
                                clients[i][7] = medTemp;
                                clients[i][8] = 0;
                            }else{
                                medTemp = aux - (Integer)cajeros[varTemp-1][0];
                                inTemp = (Integer)cajeros[varTemp-1][0] + medTemp;
                                outTemp = (Integer)cajeros[varTemp-1][1] + medTemp;
                                cajeros[varTemp-1][0] = inTemp;
                                cajeros[varTemp-1][1] = outTemp;
                                clients[i][7] = 0;
                                clients[i][8] = medTemp;
                            }
                            clients[i][3] = inTemp.toString()+" --->"+(varTemp);
                            clients[i][4] = outTemp.toString()+" --->"+(varTemp);
                        //clients[i][3] = cajeros[varTemp-1][0].toString()+" --->"+(varTemp);
                        //clients[i][4] = cajeros[varTemp-1][1].toString()+" --->"+(varTemp);
                        clients[i][5] = clients[i][2];
                        clients[i][6] = parseInt(clients[i][4].toString().split(" ")[0]);
                    }
                }
                jTableMain.setModel(new javax.swing.table.DefaultTableModel(clients, headers));
                jTableMain.repaint();
            }
        } catch (ParseException ex) {
            Logger.getLogger(Cajeros.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButtonGenerateMouseClicked
    
    public static String convertTo24Hour(String Time) {
        DateFormat f1 = new SimpleDateFormat("hh:mm a");
        Date d = null;
        try {
            d = f1.parse(Time);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
        }
        DateFormat f2 = new SimpleDateFormat("HH:mm");
        String x = f2.format(d);
        return x;
    }
    
    public static String compareTime(String valueStart, String valueEnd) throws ParseException {
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");

            Date timeStart = formatter.parse(convertTo24Hour(valueStart));
            Date timeEnd = formatter.parse(convertTo24Hour(valueEnd));
            
            if(timeStart.after(timeEnd) || timeStart.equals(timeEnd)){
                return "Horario de inicio debe ser mayor que el final.";
            }else{
                return "";
            }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cajeros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Cajeros().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelErrorCajeros;
    private javax.swing.JLabel jLabelErrorClientes;
    private javax.swing.JLabel jLabelErrorOnHours;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTableMain;
    private javax.swing.JTextField jTextFieldCajeros;
    private javax.swing.JTextField jTextFieldClientes;
    // End of variables declaration//GEN-END:variables
}
